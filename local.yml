- hosts: localhost
  connection: local

  # TODO(patrik): Download nim

  pre_tasks:
    - name: Update system (apt)
      apt:
        update_cache: yes
        upgrade: yes
      become: yes
      when: ansible_distribution == "Ubuntu"

    - name: Update system (pacman)
      pacman:
        update_cache: yes
        upgrade: yes
      become: yes
      when: ansible_distribution == "Archlinux"

  tasks:
    - name: Install base packages (apt)
      loop:
        - build-essential
        - git
        - curl
        - unzip
        - tar
        - stow
        - ripgrep
        - fd-find
        - fzy
      apt:
        name: "{{ item }}"
        state: present
      become: yes
      when: ansible_distribution == "Ubuntu"

    - name: Install base packages (pacman)
      loop:
        - base-devel
        - git
        - curl
        - tar
        - stow
        - ripgrep
        - fd
        - fzy
      pacman:
        name: "{{ item }}"
        state: present
      become: yes
      when: ansible_distribution == "Archlinux"

    - name: Create directories
      loop:
        - "{{ ansible_env.HOME }}/.config"
        - "{{ ansible_env.HOME }}/opt"
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory

    - name: Checkout Dotfiles repo
      ansible.builtin.git:
        repo: "https://www.github.com/nanoteck137/dotfiles.git"
        dest: "{{ ansible_env.HOME }}/dotfiles"

    - name: Stow Dotfiles
      loop:
        - nvim
        - i3
        - zsh
      shell: "stow {{ item }} -d {{ ansible_env.HOME }}/dotfiles --target {{ ansible_env.HOME }} --verbose=2"
      register: result
      changed_when: 'result.stderr is search("LINK: ")'

    - name: Install ZSH (apt)
      apt:
        name: zsh
        state: present
      become: yes
      register: zsh_install
      when: ansible_distribution == "Ubuntu"

    - name: Fetch "Oh my zsh" installer
      ansible.builtin.uri:
        url: https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh
        return_content: yes
      register: ohmyzsh_installer

    - name: Run "Oh my zsh" installer
      ansible.builtin.shell:
        cmd: sh -s -- --unattended --keep-zshrc
        stdin: "{{ ohmyzsh_installer.content }}"
        creates: "{{ ansible_env.HOME }}/.oh-my-zsh"

    - name: Which ZSH
      command: which zsh
      register: which_zsh
      changed_when: false

    - name: Set login shell of user {{ ansible_env.USER }} to `/bin/zsh` with `usermod`
      command: usermod --shell {{ which_zsh.stdout }} {{ ansible_env.USER }}
      become: true
      changed_when: false

    - name: Install nvm
      ansible.builtin.git:
        repo: "https://github.com/nvm-sh/nvm.git"
        dest: "{{ ansible_env.HOME }}/.nvm"
        version: "v0.39.3"

    - name: Download NVIM
      ansible.builtin.get_url:
        url: https://github.com/neovim/neovim/releases/download/nightly/nvim-linux64.tar.gz
        dest: "{{ ansible_env.HOME }}/opt"
        checksum: sha256:https://github.com/neovim/neovim/releases/download/nightly/nvim-linux64.tar.gz.sha256sum
      register: download_nvim

    - name: Unpack NVIM
      unarchive:
        src: "{{ download_nvim.dest }}"
        dest: "{{ ansible_env.HOME }}/opt"
      when: download_nvim.changed == true

    - name: Install NVIM Packer
      git:
        repo: "https://github.com/wbthomason/packer.nvim"
        dest: "{{ ansible_env.HOME }}/.local/share/nvim/site/pack/packer/start/packer.nvim"

    - name: Install Sobble
      git:
        repo: "https://www.github.com/nanoteck137/sobble.nvim"
        dest: "{{ ansible_env.HOME }}/plugins/sobble.nvim"

    - name: Install Scorbunny
      git:
        repo: "https://www.github.com/nanoteck137/scorbunny.nvim"
        dest: "{{ ansible_env.HOME }}/plugins/scorbunny.nvim"

    - name: Fetch Rust installer
      ansible.builtin.uri:
        url: https://sh.rustup.rs
        return_content: yes
      register: rust_installer

    - name: Run Rust installer
      ansible.builtin.shell:
        cmd: sh -s -- --default-toolchain nightly --no-modify-path -y
        stdin: "{{ rust_installer.content }}"
        creates: "{{ ansible_env.HOME }}/.cargo"

    - name: Add paths to .zshenv
      ansible.builtin.blockinfile:
        path: "{{ ansible_env.HOME }}/.zshenv"
        state: present
        create: true
        marker: "# {mark} Ansible Marker for {{ item.name }}"
        block: |
          export PATH=$PATH:{{ item.path }}
      loop:
        - { name: cargo, path: "{{ ansible_env.HOME }}/.cargo/bin" }
        - { name: nvim, path: "{{ ansible_env.HOME }}/opt/nvim-linux64/bin" }

    - name: Add nvm to .zshenv
      ansible.builtin.blockinfile:
        path: "{{ ansible_env.HOME }}/.zshenv"
        state: present
        create: true
        marker: "# {mark} Ansible Marker for nvm"
        block: |
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
